	<div id="menu-wrapper">
		<div id="menu" class="container">
			<ul>
				<li>@Html.ActionLink("Home", "Index", "Home")</li>
				<li>@Html.ActionLink("Block Explorer", "Index", "Explorer")</li>
				<li><a href="#">Stats</a></li>
				<li><a href="#">Transactions</a></li>
				<li class="current_page_item">@Html.ActionLink("About Us", "About", "Home")</li>
				<li>@Html.ActionLink("Contact Us", "Contact", "Home")</li>
			</ul>
		</div>
	</div>

<script src="~/Scripts/jquery.details.js"></script>
<script>
    $(function () {
        $('html').addClass($.fn.details.support ? 'details' : 'no-details');
        $('details').details();
    });
</script>

<div id="page" class="container">
		<div id="content">
			<div class="post">
				<h2 class="title">What is VisualBitcoin?</h2>
				<div class="entry">

<p>
    VisualBitcoin is a cloud-hosted information website that tracks bitcoin transactions in real time. VisualBitcoin
    was started as a student project at &Eacute;cole Normale Supérieure, Paris. This
    site was produced for monitoring bitcoin transactions online.
    <br />
    Bitcoin is a digital currency whose transfer is based on the cryptographic protocols. You can read more
    on about it <a href="http://bitcoin.org/about.html">here</a>.
    <br />
    This project consists of <a href="#Client">Bitcoin client</a>, <a href="#Worker Role" >Bitcoin worker role</a>, <a href="#Storage Implementation">Storage implementation</a>, 
    <a href="#Storage Worker Role">Storage worker role</a> and <a href="#Web Role">Web role</a> . This project is created for Windows Azure virtual machine; it uses Windows Azure Storage and other cloud technologies of the Windows Corporation. 
    <br />
</p>

<a id="Main Schema"></a>
<details>
    <summary><b>Main Schema</b> </summary> 
        <br/>
    <img alt="Main Schema couldn't be loaded." src="~/Content/Schemas/Main schema.png" style="text-align:center;vertical-align:middle"/>
</details>

<br/>
<a id="Client"></a>
<details> <summary><b>Bitcoin client</b></summary><br/>
            For our application we use the standard bitcoin client, launched on the Windows Azure Virtual Machine (VM), from which we take new transactions and information about blocks.
</details>
<br/>
<a id="Worker Role"></a>
<details> <summary><b>Bitcoin Worker Role</b></summary>
            <br/>
Consists of two classes: WorkerRole and BitcoinClient. WorkerRole is an entry point class that connects to the bitcoin client on the VM. BitcoinClient class takes data from the Bitcoin Client. It also converts received data to the XML format and extracts transactions from the blocks. It uses Storage implementation for uploading data to the Azure Storage. Blocks are saved to the BocksContainer and Transactions are saved to the Transactions container. Also this part adds messages to the queue with regards to which block should be processed next.
    <details>
        <summary style="font: bold">Schema</summary> 
        <img alt="Schema couldn't be loaded." src="~/Content/Schemas/WorkerRole.png"/>
    </details>
</details>
<br/>                            
<a id="Storage Implementation"></a>
<details> <summary><b>Storage implementation</b> </summary>
<br/>This is a service part of the project for communicating with Windows Azure Storage. It contains with:
<ul>
    <li>Serilization – saving different data models to the storage in  XML format; </li>
    <li>Models – in this folder different structures of data are described. All these models are serialized; </li>
	<li>Coding /not implemented/ – zipping and unzipping data to minimize data exchange; </li>
	<li>Managing Windows Azure Storage – starting and connecting to different containers.</li>
</ul>
<br/>We use three containers and a queue in Windows Azure Storage. 
<br/>In the BlockContainer we save information of the blocks like a XML file. We use the block’s hash to name each file. In these files all information about bitcoin blocks are saved. To minimize the file’s size we removed transactions and added just their hashes. 
<br/>In the TransactionsContainer we saved transactions XML by their hashes. Also we added the hash of the block owned by this transaction to the XML structure. 
<br/>In the StatContainer we save transactions’ hashes by time to accelerate data processing and access to the data from the UI.
    <br/>
    <details> <summary><b>Models</b></summary>
    <br/> 
    <ul>
        <li><span style="font:bold">Bitcoin worker role.</span> Saves all necessary data for Worker Role Client for back-up.</li>
        <li><span style="font:bold">Block.</span> Represents block which is used in Bitcoin network. </li>
	    <li><span style="font:bold">Block reference.</span> Reference to the block. Reference name is realized like a hash. </li>
	    <li><span style="font:bold">Transaction.</span> Represents transaction of the bitcoin network.</li>
        <li><span style="font:bold">Statistics.</span> Saves different kinds of statistics on Time, Blocks, Transactions.</li>
    </ul>

    </details>
</details>
<br/>
<a id="Storage Worker Role"></a>
<details> <summary><b>Storage Worker Role </b></summary>
<br/>In this project we process data, add references to the statistics container, and collect statistical information and save it to the storage.<br/>
    <details>
        <summary><b>Schema</b></summary> 
        <br/> <img alt="Schema couldn't be loaded." src="~/Content/Schemas/StorageWorkerRole.png"/>
    </details>

</details>
<br/>
<a id="Web Role"></a>
<details> <summary><b>Web Role</b></summary>
    <br/>A web site with a user interface (UI). Connect to the blob storage and represent requested data. Allows the constructing of charts and the navigation in blocks and transactions. From each block you can see and discover information on transactions which belongs to it.
    <br/>
    <details>
        <summary><b>Schema</b></summary> 
        <br/><img alt="Schema couldn't be loaded." src="~/Content/Schemas/WebRole.png"/>
    </details>
 </details>
<br />                    

<h3>License</h3>
    <p>
    &copy; Copyright 2013 Axel Davy, Nohemi Fernandez, Baptiste Lefebre,  Ken Chenseau Sain-Germain, Christophe Cordero, Denys Kanunikov
    </p>
    <p>Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:</p>
    <p>The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.</p>
    <p>
    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
    </p>
                       </div>
                </div>
            </div>
    </div>

